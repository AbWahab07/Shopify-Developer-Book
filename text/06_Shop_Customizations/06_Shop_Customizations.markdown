## Shop Customizations ##

I would like to briefly explain some Shopify customizations that have not only stood the test of time but that I think underline the flexibility of the Shopify platform. 

The first example shop started up and met with some initial success. So much success that the shop owner was up against a wall with the Shopify Admin. He had one thousand orders that were all paid and needed to be fulfilled. And those orders came in just a short period of time. He phoned me to inform me that the task of individually fulfilling these one thousand orders was stressing his wife out and that in turn was stressing him out. You can use the Shopify API to inject a link into the Orders Overview screen so I told the client that I could hook up an App would respond a click on this link and fulfill all the orders selected. Since this can be up to 250 orders, his wife went from one thousand clicks to a handful. 

This seemingly simple task, fulfilling orders in bulk taught me valuable lessons about using the Shopify API within the limits that must be respected when using the API. Shops are limited to 500 API calls in 300 seconds. If the App fulfilled 250, and then a second request came in moments later for 250 more, followed shortly thereafter with another 250, then API limits would be exceeded and the App would block me for sure! Early attempts to overcome these limits resulted in some code that would just go to sleep for 300 seconds once the API limit was reached but this technique quickly had problems. My solution was to accept any and all requests to fulfill orders. Upon receipt of 1, 10 or even 250 orders to fulfill I setup the orders to be fulfilled in the App and return to the Shopify Admin. I setup a job to process the fulfillments in the background. The job is run by a so-called App worker and it tries to connect to Shopify using the API to fulfill all the orders. Each time a call to Shopify via the API happens, it either succeeds or it does not. If it does not succeed because the API limits have been reached, the job creates a new job with the orders yet to be processed and it sets that job to run 300 seconds in the future. Using this technique, it is possible to process as many API calls as possible without worry over API limits. It's a very elegant and robust system proven to work well.

Once that small task was completed a more interesting issue arose. The products sold by the shop are edible and they always get delivered on a Monday or Tuesday. Additionally, when ordering the product the clients wanted to order for more than one week. Shopify does not currently support a recurring order or subscription service so we had to put on our thinking caps. The solution was to provide a quantity field for the product in the cart for each week a person wanted the product. A person could order one, two or up to four weeks of the product, and simply pay once. By recording the date, it's possible to know exactly how many products get delivered per week per person. Some people order 2 or more per week, so this had an immediate positive impact on the bottom line. We even added a button providing 3 months worth of future dates. 

Using a WebHook to capture each order, we inspect the line items and the cart.attributes for quantities and dates per product. Setting up a small data structure to record the dates and quantities means the Shop keeper can generate a nice Excel style grid of weekly deliveries with the ability to plan ahead. Once that proved successful, and many thousands of orders were being booked, it turned out that the ability to fulfill orders automatically using the API was crucial. The reason is that since you can fulfill an order as many times as you want, an order that has deliveries in the future can be fulfilled *each* time a delivery comes up. When you use the API to fulfill an already fulfilled but open order, the Shipping Confirmation email goes out, alerting the shopper that their delivery is on the way. Only when all deliveries are completed does an order get closed. 

At this point the store was running smooth. The Shop owner then wanted to add a twist to the cart. He wanted to Upsell special products with the existing products. As an example, when Valentines rolls around it sure would be nice to offer a box of chocolates with that order would it not my friend? By creating a new product in Shopify and setting it's type to *upsell* we could offer this special product along side the regular products. The App allows the shop to assign any products of type **upsell** to any other regular products. Using Liquid, if the regular product has been assigned any **upsell** products we can render them too.

By presenting upsell products the shop was able to sell a huge amount of additional products per order. Upsells were an immediate hit. Using the API to customize the operation of a shop can really boost sales. One particular day saw an upsell convert on 1449 of 1450 carts. That is pretty impressive in my books. 

With so many people now subscribing to smartphones and SMS services, it made sense to add this to the Shop fulfillment. It was easy enough to add a form to the Shop Thank You page asking the shopper if they wanted an SMS message when their order was fulfilled. Remarkably a huge number of people have provided their SMS number. The App now sends an SMS to each person when their order is fulfilled as opposed to an email which can sometimes be blocked by corporate firewalls. 

This kind of customization is not necessarily everyone's need or requirement but it illustrates how you can choose the Shopify platform with confidence that it can handle whatever twists are thrown into the mix. Some other recent surprising experiences came from integrating Shopify with the well known Salesforce CRM system. It turns out that when you subscribe to Salesforce and want to send orders there, they did not process the WebHook XML properly. A quick bridge was built by deploying an App to the cloud to accept these WebHooks from Shopify, and having the App then forward the order to Salesforce using XML formatted in a way that Salesforce was capable of accepting. Additionally, Salesforce comes with some pretty severe limits on what you can do with an entry level plan. Sometimes it turns out that you can do better with an App running in the cloud, so bridging Shopify to an App and Salesforce has shown itself to be a pretty powerful but cost effective system too. 

