## Shop Customizations ##

Here are some Shopify customizations that have stood the test of time and that underline the flexibility of the Shopify platform. 

A merchant launched his shop and met with initial success. So many orders came in that the merchant was up against a wall with the shop administration interface. He had one thousand orders that were all paid up and needed to be fulfilled. Those orders were from a short period of time like under a week. He wanted to know how to convert the task of individually fulfilling one thousand orders (totally stressing his wife out and that that in turn was stressing him out) into a single click. You can use the Shopify API to inject a link into the Orders Overview screen so an App was quickly built that would respond to a click and fulfill all the selected orders. His wife was no doubt pleased to be relieved of the burden of thousand click order fulfillment sessions. 

Fulfilling orders in bulk is one small but handy use for the Shopify API. In talking of one thousand orders that brings up the important topic that the Shopify API has limits on how much any one App can use in a short period of time. An App has to stay within the limits and they are currently that an App can make 500 API calls in 300 seconds. If an App fulfilled 250 orders and then a second request came in moments later requesting 250 more orders be fulfilled followed shortly thereafter with another 250 orders the API limits would certainly be exceeded and the App would be blocked from using the API. This the important task a developer has to think of is ensuring these limits do not cause problems for merchants.

### Using Delayed Jobs to Manage API Limits ###

Early attempts to work within the API limits resulted in code that would sleep for 300 seconds when the API limit was reached. This turned out to be awkward for many reasons. Keeping track with certainty that all App operations have completed without failure and counting API calls used up is prone to error. A better solution is to setup a delayed job and process API operations in the background. This turns out to be true of most Apps. You never want to lock up the user interface of an App while doing ten, thirty or more seconds of processing. That is not acceptable. Any created delayed jobs are run by a cheap worker processes that just wait around for jobs to do. Each API call to Shopify either succeeds or fails. If it fails because the API limits have been reached the delayed job can react to this exception and spawn a new delayed job in the future with the remaining work to do. Using this technique it is possible to process as many API calls as needed without limit problems and without slow locked up interfaces. It's a very elegant and robust system proven to work well by hundreds of thousands of successful API calls. Shopify itself performs all of the inventory import and export operations using delayed jobs.

The merchant had solved the fulfillment issue and now turned to other special issues. His products are perishable and they always get delivered on a Monday or Tuesday. When ordering the products customers wanted to order for more than one week. Customers are comfortable paying for an entire month of this product and so there was a need to figure out how to deal with this. Shopify does not currently support a recurring order or subscription service so the solution was to provide a quantity field for the product in the cart for each week a person wanted the product. A person could order one, two or up to four weeks of the product and pay just once for all the deliveries. By recording the delivery dates and quantities of each product ordered, it is possible to know exactly how many products get delivered per week per customer. Some customers order two or more per week so this had an immediate positive impact on the bottom line. There is even a button providing up to 3 months worth of future dates. Watching a merchant nail 15% higher sales with tweaks like this is rewarding.

### Using Cart Attributes and WebHooks Together ###

Using a WebHook to capture paid orders an App can be used to inspect the line items and the cart attributes for quantities and dates per product. Setting up a small data structure to record the dates and quantities means the merchant can generate a nice Excel style grid of weekly deliveries with the ability to plan ahead. Once that step proved successful and many thousands of orders were being booked it turned out that the ability to fulfill orders automatically using the API was crucial. The reason is that since you can fulfill an order as many times as you want, an order that has deliveries in the future can be fulfilled *each* time a delivery comes up. When you use the API to fulfill an already fulfilled but still open order, the Shipping Confirmation email goes out, alerting the customer that their delivery is on the way. Only when all deliveries are completed does an order get closed. At that point it can even be removed from the App.

### Adding Upsells to Boost Sales ###

At this point the merchant's shop was running smooth and booking many thousands of orders per week. The merchant wanted to add a new feature to the shop. He wanted to *upsell* special products with the existing products. When Valentines Day rolls around it would be nice to offer a box of chocolates as an additional product. By creating a new product in Shopify and setting it's type to *upsell* the shop could offer this special product alongside the regular products. The App allows the shop to assign any products of type **upsell** to any other regular products. Using Liquid, if the regular product has been assigned any **upsell** products we can render them too. By presenting upsell products the shop was able to sell a huge amount of additional products per order. Upsells were an immediate hit. Using the API to customize the operation of a shop can really boost sales. One particular day saw an upsell convert on 1449 of 1450 carts. That is pretty impressive.

The pattern of upsells eventually moved back into a pure Shopify solution. Collection were created to hold the products of type upsell. Using a special _product.upsell.liquid_ template when rendering products, it became possible to sell all the products in the collection with one add to cart button. This improvement did away with a lot of Ajax code and complexity and demonstrated that shops can truly go through periods of experimentation and evolution while still recording sales.  

### Adding SMS Notifications ###

With so many people using smartphones and SMS services, it made sense to add this to the shop fulfillment operations. It was easy enough to add a form to the shop's *Thank You* page asking the customer if they wanted an SMS message when their order was fulfilled. Remarkably a huge number of people have provided their SMS numbers and the App now sends an SMS to each customer when their order is fulfilled. Emails can sometimes be blocked by corporate firewalls and they proved to be less reliable.

This kind of customization illustrates how you can use the Shopify platform with confidence knowing that it can handle twists that get thrown into the typical mix of business use cases and scenarios that are customer driven. Other recent surprising experiences came from integrating Shopify with the well known Salesforce CRM system. It turns out that when you subscribe to Salesforce and want to send orders there they did not process the Shopify WebHook XML properly. A quick bridge was built by deploying an App to the cloud to accept WebHooks from Shopify and then having the App forward the order to Salesforce using XML formatted for Salesforce. Apps as a Proxy! Additionally Salesforce comes with some pretty severe limits on what you can do with an entry level plan. Sometimes it turns out that you can do better with an App running in the cloud, so bridging Shopify to an App and Salesforce has shown itself to be a pretty powerful but cost effective system too. Shopify is soon to release an approved SalesForce App so that will likely appeal to the CRM crowd.

