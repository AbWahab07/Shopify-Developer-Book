## Shop Customizations ##

I would like to briefly explain some Shopify customizations that have not only stood the test of time but that I think underline the flexibility of the Shopify platform. 

One shop started up and met with some initial success. So much success that the shop owner was up against a wall with the Shopify administration Orders interface. He had one thousand orders that were all paid up and needed to be fulfilled. Those orders were from a short period of time under a week. He phoned me to inform me that the task of individually fulfilling these one thousand orders was stressing his wife out and that that in turn was stressing him out. You can use the Shopify API to inject a link into the Orders Overview screen so I told him that I could hook up an App that would respond to a click and fulfill all the selected orders. His wife was no doubt pleased to be relieved of the click-o-rama sessions. 

Fulfilling orders in bulk taught me valuable lessons about using the Shopify API. An App has to stay within the limits that govern how many times you can use the API in a short amount of time. Shops can make 500 API calls in 300 seconds. If an App fulfilled 250 orders and then a second request came in moments later requesting 250 more orders be fulfilled followed shortly thereafter with another 250 orders the API limits would certainly be exceeded and the App would be blocked from using the API.

### Using Delayed Jobs to Manage API Limits ###

Early attempts to work within the API limits resulted in using code that would sleep for 300 seconds when the API limit was reached. This turned out to be awkward for many reasons. I needed certainty that all operations completed without failure without the complexity of counting API calls. My solution was to setup a delayed job to process the fulfillments in the background. The delayed job is run by a worker process. Each API call to Shopify either succeeds or it does not. If it does not succeed because the API limits have been reached the delayed job spawns a new delayed job with the remaining work to do and it sets it to run 300 seconds in the future. Using this technique it is possible to process as many API calls as possible without API limit problems. It's a very elegant and robust system proven to work well by hundreds of thousands of successful API calls.

Once that task was completed a more interesting issue arose. The products sold are edible and they always get delivered on a Monday or Tuesday. When ordering the product clients wanted to order for more than one week. Shopify does not currently support a recurring order or subscription service so we had to put on our thinking caps. The solution was to provide a quantity field for the product in the cart for each week a person wanted the product. A person could order one, two or up to four weeks of the product and pay once for all deliveries. By recording the delivery dates, it is possible to know exactly how many products get delivered per week per person. Some people order 2 or more per week so this had an immediate positive impact on the bottom line. We even added a button providing 3 months worth of future dates. Watching a shop nail 15% or higher sales with tweaks like this is rewarding.

### Using Cart Attributes and WebHooks Together ###

Using a WebHook to capture paid orders we inspect the line items and the cart attributes for quantities and dates per product. Setting up a small data structure to record the dates and quantities means the Shop keeper can generate a nice Excel style grid of weekly deliveries with the ability to plan ahead. Once that proved successful, and many thousands of orders were being booked, it turned out that the ability to fulfill orders automatically using the API was crucial. The reason is that since you can fulfill an order as many times as you want, an order that has deliveries in the future can be fulfilled *each* time a delivery comes up. When you use the API to fulfill an already fulfilled but open order, the Shipping Confirmation email goes out, alerting the shopper that their delivery is on the way. Only when all deliveries are completed does an order get closed. 

### Adding Upsells to Boost Sales ###

At this point the store was running smooth. The shop owner wanted to add a twist to the cart. He wanted to *upsell* special products with the existing products. As an example, when Valentines rolls around it would be nice to offer a box of chocolates as an additional product. By creating a new product in Shopify and setting it's type to *upsell* we could offer this special product along side the regular products. The App allows the shop to assign any products of type **upsell** to any other regular products. Using Liquid, if the regular product has been assigned any **upsell** products we can render them too.

By presenting upsell products the shop was able to sell a huge amount of additional products per order. Upsells were an immediate hit. Using the API to customize the operation of a shop can really boost sales. One particular day saw an upsell convert on 1449 of 1450 carts. That is pretty impressive in my books. 

### Adding SMS Notifications ###

With so many people now using smartphones and SMS services, it made sense to add this to the shop fulfillment operations. It was easy enough to add a form to the shop's *Thank You* page asking the shopper if they wanted an SMS message when their order was fulfilled. Remarkably a huge number of people have provided their SMS numbers. The App now sends an SMS to each person when their order is fulfilled as opposed to an email which can sometimes be blocked by corporate firewalls. 

This kind of customization illustrates how you can use the Shopify platform with confidence, knowing that it can handle twists that get thrown into the typical mix of scenarios that are possible. Some other recent surprising experiences came from integrating Shopify with the well known Salesforce CRM system. It turns out that when you subscribe to Salesforce and want to send orders there, they did not process the WebHook XML properly. A quick bridge was built by deploying an App to the cloud to accept these WebHooks from Shopify, and having the App then forward the order to Salesforce using XML formatted in a way that Salesforce was capable of accepting. Additionally, Salesforce comes with some pretty severe limits on what you can do with an entry level plan. Sometimes it turns out that you can do better with an App running in the cloud, so bridging Shopify to an App and Salesforce has shown itself to be a pretty powerful but cost effective system too. Shopify is soon to release an approved SalesForce App so that will likely appeal to the CRM crowd.

